{
  "address": "0x9b9B1D76C04e8CeD255778aFeD0D342d80f416EA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "astrOFTWithFee",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "enum Types.Operation",
          "name": "operation",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "estimateSendAndCallFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Types.Operation",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "minAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstGasForCall",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remoteContract",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Types.Operation",
          "name": "_operation",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_remoteContract",
          "type": "address"
        }
      ],
      "name": "setRemoteContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vAstrOFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x72c8a207a9b5019ecef825f5564e066da6f05f23eed289913f9a2fc55760975c",
  "receipt": {
    "to": null,
    "from": "0xa087F042A0802abdE056B7978bA3837943DD55FE",
    "contractAddress": "0x9b9B1D76C04e8CeD255778aFeD0D342d80f416EA",
    "transactionIndex": 0,
    "gasUsed": "1581120",
    "logsBloom": "0x
    "blockHash": "0x24020afa3da309b1107e9233c1b48229b18fafa82551f31dcf2efeddda4075ab",
    "transactionHash": "0x72c8a207a9b5019ecef825f5564e066da6f05f23eed289913f9a2fc55760975c",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 8374810,
        "transactionHash": "0x72c8a207a9b5019ecef825f5564e066da6f05f23eed289913f9a2fc55760975c",
        "address": "0x9b9B1D76C04e8CeD255778aFeD0D342d80f416EA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a087f042a0802abde056b7978ba3837943dd55fe"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x24020afa3da309b1107e9233c1b48229b18fafa82551f31dcf2efeddda4075ab"
      }
    ],
    "blockNumber": 8374810,
    "cumulativeGasUsed": "1581120",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d14f6e48d64cc45ca9e37e57e6d6dca3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"astrOFTWithFee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"enum Types.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"estimateSendAndCallFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Types.Operation\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstGasForCall\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remoteContract\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Types.Operation\",\"name\":\"_operation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_remoteContract\",\"type\":\"address\"}],\"name\":\"setRemoteContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vAstrOFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AstarZkSlpx.sol\":\"AstarZkSlpx\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AstarZkSlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IOFTWithFee.sol\\\";\\nimport \\\"./interfaces/IOFTV2.sol\\\";\\nimport \\\"./interfaces/Types.sol\\\";\\n\\ncontract AstarZkSlpx is Ownable {\\n    address public constant astrOFTWithFee =\\n        0xdf41220C7e322bFEF933D85D01821ad277f90172;\\n    address public constant vAstrOFT =\\n        0x7746ef546d562b443AE4B4145541a3b1a3D75717;\\n    uint16 public constant destChainId = 210;\\n    bytes32 public remoteContract;\\n\\n    mapping(Types.Operation => uint256) public minAmount;\\n\\n    event Mint(address indexed caller, uint256 indexed amount);\\n    event Redeem(address indexed caller, uint256 indexed amount);\\n\\n    function setRemoteContract(address _remoteContract) public onlyOwner {\\n        require(_remoteContract != address(0), \\\"Invalid remoteContract\\\");\\n        remoteContract = bytes32(uint256(uint160(_remoteContract)));\\n    }\\n\\n    function setMinAmount(\\n        Types.Operation _operation,\\n        uint256 _minAmount\\n    ) public onlyOwner {\\n        require(_minAmount != 0, \\\"Invalid minAmount\\\");\\n        minAmount[_operation] = _minAmount;\\n    }\\n\\n    function mint(\\n        uint256 _amount,\\n        uint64 _dstGasForCall,\\n        bytes calldata _adapterParams\\n    ) external payable {\\n        require(_amount >= minAmount[Types.Operation.Mint], \\\"amount too small\\\");\\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\\n            payable(_msgSender()),\\n            address(0),\\n            _adapterParams\\n        );\\n\\n        (uint256 estimateFee, bytes memory payload) = estimateSendAndCallFee(\\n            _msgSender(),\\n            Types.Operation.Mint,\\n            _amount,\\n            _dstGasForCall,\\n            _adapterParams\\n        );\\n        require(msg.value >= estimateFee, \\\"too small fee\\\");\\n        if (msg.value != estimateFee) {\\n            uint256 refundAmount = msg.value - estimateFee;\\n            (bool success, ) = _msgSender().call{value: refundAmount}(\\\"\\\");\\n            require(success, \\\"failed to refund\\\");\\n        }\\n\\n        IOFTWithFee(astrOFTWithFee).sendAndCall{value: estimateFee}(\\n            _msgSender(),\\n            destChainId,\\n            remoteContract,\\n            _amount,\\n            _amount / 2,\\n            payload,\\n            _dstGasForCall,\\n            callParams\\n        );\\n\\n        emit Mint(_msgSender(), _amount);\\n    }\\n\\n    function redeem(\\n        uint256 _amount,\\n        uint64 _dstGasForCall,\\n        bytes calldata _adapterParams\\n    ) external payable {\\n        require(\\n            _amount >= minAmount[Types.Operation.Redeem],\\n            \\\"amount too small\\\"\\n        );\\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\\n            payable(_msgSender()),\\n            address(0),\\n            _adapterParams\\n        );\\n\\n        (uint256 estimateFee, bytes memory payload) = estimateSendAndCallFee(\\n            _msgSender(),\\n            Types.Operation.Redeem,\\n            _amount,\\n            _dstGasForCall,\\n            _adapterParams\\n        );\\n        require(msg.value >= estimateFee, \\\"too small fee\\\");\\n        if (msg.value != estimateFee) {\\n            uint256 refundAmount = msg.value - estimateFee;\\n            (bool success, ) = _msgSender().call{value: refundAmount}(\\\"\\\");\\n            require(success, \\\"failed to refund\\\");\\n        }\\n\\n        IOFTV2(vAstrOFT).sendAndCall{value: estimateFee}(\\n            _msgSender(),\\n            destChainId,\\n            remoteContract,\\n            _amount,\\n            payload,\\n            _dstGasForCall,\\n            callParams\\n        );\\n\\n        emit Redeem(_msgSender(), _amount);\\n    }\\n\\n    function estimateSendAndCallFee(\\n        address caller,\\n        Types.Operation operation,\\n        uint256 _amount,\\n        uint64 _dstGasForCall,\\n        bytes calldata _adapterParams\\n    ) public view returns (uint256, bytes memory) {\\n        if (operation == Types.Operation.Mint) {\\n            bytes memory payload = abi.encode(caller, Types.Operation.Mint);\\n            (uint256 estimateFee, ) = IOFTWithFee(astrOFTWithFee)\\n                .estimateSendAndCallFee(\\n                    destChainId,\\n                    remoteContract,\\n                    _amount,\\n                    payload,\\n                    _dstGasForCall,\\n                    false,\\n                    _adapterParams\\n                );\\n            return (estimateFee, payload);\\n        } else {\\n            bytes memory payload = abi.encode(caller, Types.Operation.Redeem);\\n            (uint256 estimateFee, ) = IOFTV2(vAstrOFT).estimateSendAndCallFee(\\n                destChainId,\\n                remoteContract,\\n                _amount,\\n                payload,\\n                _dstGasForCall,\\n                false,\\n                _adapterParams\\n            );\\n            return (estimateFee, payload);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1eff265899d891901ff01a592f7e9931c87daece3cb4b21fdffbd570d9007e1\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        bool _useZro,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x685586b87541a45bf6b634ef5e356a8968b3c23b33e929dec1807614db26cd6a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xd585b8f5c6b3569cd2d5d5d04345f17e9bf0d3f4ea4d0831cb4da6129629a555\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\ninterface IOFTWithFee is ICommonOFT {\\n    function deposit() external payable;\\n    function withdraw(uint _amount) external;\\n    function sendFrom(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint _minAmount,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n    function sendAndCall(\\n        address _from,\\n        uint16 _dstChainId,\\n        bytes32 _toAddress,\\n        uint _amount,\\n        uint _minAmount,\\n        bytes calldata _payload,\\n        uint64 _dstGasForCall,\\n        LzCallParams calldata _callParams\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x02a49685f9f9870eed1f579be6d80b21966681893c6294d0627be372a5eb1186\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/Types.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface Types {\\n    enum Operation {\\n        Mint,\\n        Redeem\\n    }\\n}\\n\",\"keccak256\":\"0x2c1400e68ac0c25b82495ea5b014f265784ba28000644290493915e04157ad15\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063aabdc0821161007f578063c0afb3f411610059578063c0afb3f41461020e578063c4af1c0b1461022e578063c8b7525914610256578063f2fde38b1461027657600080fd5b8063aabdc082146101bb578063aed7bbbb146101e8578063b3754e86146101fb57600080fd5b80630663b2d1146100c75780630c5d9931146100f0578063205ff03d1461013057806327e540111461015e578063715018a6146101865780638da5cb5b1461019d575b600080fd5b3480156100d357600080fd5b506100dd60015481565b6040519081526020015b60405180910390f35b3480156100fc57600080fd5b5061011873df41220c7e322bfef933d85d01821ad277f9017281565b6040516001600160a01b0390911681526020016100e7565b34801561013c57600080fd5b5061015061014b366004610bd6565b610296565b6040516100e7929190610ca2565b34801561016a57600080fd5b50610118737746ef546d562b443ae4b4145541a3b1a3d7571781565b34801561019257600080fd5b5061019b6103ed565b005b3480156101a957600080fd5b506000546001600160a01b0316610118565b3480156101c757600080fd5b506100dd6101d6366004610cc3565b60026020526000908152604090205481565b61019b6101f6366004610ce5565b610401565b61019b610209366004610ce5565b61069b565b34801561021a57600080fd5b5061019b610229366004610d3f565b61093c565b34801561023a57600080fd5b5061024360d281565b60405161ffff90911681526020016100e7565b34801561026257600080fd5b5061019b610271366004610d5a565b6109a1565b34801561028257600080fd5b5061019b610291366004610d3f565b610a27565b60006060818760018111156102ad576102ad610d84565b14156103715760008860006040516020016102c9929190610d9a565b60408051601f198184030181529082905260015463a4c51df560e01b835290925060009173df41220c7e322bfef933d85d01821ad277f901729163a4c51df5916103249160d2918d9088908e9089908f908f90600401610dd5565b6040805180830381865afa158015610340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103649190610e4e565b5093509091506103e29050565b6000886001604051602001610387929190610d9a565b60408051601f198184030181529082905260015463a4c51df560e01b8352909250600091737746ef546d562b443ae4b4145541a3b1a3d757179163a4c51df5916103249160d2918d9088908e9089908f908f90600401610dd5565b965096945050505050565b6103f5610aa0565b6103ff6000610afa565b565b600160005260026020527fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0548410156104745760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b60448201526064015b60405180910390fd5b600060405180606001604052806104883390565b6001600160a01b0316815260200160006001600160a01b0316815260200184848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250939094525092935091508190506104f433600189898989610296565b91509150813410156105385760405162461bcd60e51b815260206004820152600d60248201526c746f6f20736d616c6c2066656560981b604482015260640161046b565b8134146105dc57600061054b8334610e72565b604051909150600090339083908381818185875af1925050503d8060008114610590576040519150601f19603f3d011682016040523d82523d6000602084013e610595565b606091505b50509050806105d95760405162461bcd60e51b815260206004820152601060248201526f19985a5b1959081d1bc81c99599d5b9960821b604482015260640161046b565b50505b600154604051630ec4076960e31b8152737746ef546d562b443ae4b4145541a3b1a3d75717916376203b4891859161062391339160d2918e9089908f908d90600401610ecc565b6000604051808303818588803b15801561063c57600080fd5b505af1158015610650573d6000803e3d6000fd5b50505050508661065d3390565b6001600160a01b03167f222838db2794d11532d940e8dec38ae307ed0b63cd97c233322e221f998767a660405160405180910390a350505050505050565b6000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b548410156107085760405162461bcd60e51b815260206004820152601060248201526f185b5bdd5b9d081d1bdbc81cdb585b1b60821b604482015260640161046b565b6000604051806060016040528061071c3390565b6001600160a01b0316815260200160006001600160a01b0316815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250929350915081905061078833600089898989610296565b91509150813410156107cc5760405162461bcd60e51b815260206004820152600d60248201526c746f6f20736d616c6c2066656560981b604482015260640161046b565b8134146108705760006107df8334610e72565b604051909150600090339083908381818185875af1925050503d8060008114610824576040519150601f19603f3d011682016040523d82523d6000602084013e610829565b606091505b505090508061086d5760405162461bcd60e51b815260206004820152601060248201526f19985a5b1959081d1bc81c99599d5b9960821b604482015260640161046b565b50505b73df41220c7e322bfef933d85d01821ad277f9017263455ba27d833360015460d2908c61089e600282610f33565b888e8c6040518a63ffffffff1660e01b81526004016108c4989796959493929190610f55565b6000604051808303818588803b1580156108dd57600080fd5b505af11580156108f1573d6000803e3d6000fd5b5050505050866108fe3390565b6001600160a01b03167f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688560405160405180910390a350505050505050565b610944610aa0565b6001600160a01b0381166109935760405162461bcd60e51b8152602060048201526016602482015275125b9d985b1a59081c995b5bdd1950dbdb9d1c9858dd60521b604482015260640161046b565b6001600160a01b0316600155565b6109a9610aa0565b806109ea5760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a59081b5a5b905b5bdd5b9d607a1b604482015260640161046b565b8060026000846001811115610a0157610a01610d84565b6001811115610a1257610a12610d84565b81526020810191909152604001600020555050565b610a2f610aa0565b6001600160a01b038116610a945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161046b565b610a9d81610afa565b50565b6000546001600160a01b031633146103ff5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161046b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b0381168114610b6157600080fd5b919050565b803560028110610b6157600080fd5b803567ffffffffffffffff81168114610b6157600080fd5b60008083601f840112610b9f57600080fd5b50813567ffffffffffffffff811115610bb757600080fd5b602083019150836020828501011115610bcf57600080fd5b9250929050565b60008060008060008060a08789031215610bef57600080fd5b610bf887610b4a565b9550610c0660208801610b66565b945060408701359350610c1b60608801610b75565b9250608087013567ffffffffffffffff811115610c3757600080fd5b610c4389828a01610b8d565b979a9699509497509295939492505050565b6000815180845260005b81811015610c7b57602081850181015186830182015201610c5f565b81811115610c8d576000602083870101525b50601f01601f19169290920160200192915050565b828152604060208201526000610cbb6040830184610c55565b949350505050565b600060208284031215610cd557600080fd5b610cde82610b66565b9392505050565b60008060008060608587031215610cfb57600080fd5b84359350610d0b60208601610b75565b9250604085013567ffffffffffffffff811115610d2757600080fd5b610d3387828801610b8d565b95989497509550505050565b600060208284031215610d5157600080fd5b610cde82610b4a565b60008060408385031215610d6d57600080fd5b610d7683610b66565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03831681526040810160028310610dc857634e487b7160e01b600052602160045260246000fd5b8260208301529392505050565b61ffff8916815287602082015286604082015260e060608201526000610dfe60e0830188610c55565b67ffffffffffffffff8716608084015285151560a084015282810360c0840152838152838560208301376000602085830101526020601f19601f8601168201019150509998505050505050505050565b60008060408385031215610e6157600080fd5b505080516020909101519092909150565b600082821015610e9257634e487b7160e01b600052601160045260246000fd5b500390565b600060018060a01b0380835116845280602084015116602085015250604082015160606040850152610cbb6060850182610c55565b60018060a01b038816815261ffff8716602082015285604082015284606082015260e060808201526000610f0360e0830186610c55565b67ffffffffffffffff851660a084015282810360c0840152610f258185610e97565b9a9950505050505050505050565b600082610f5057634e487b7160e01b600052601260045260246000fd5b500490565b600061010060018060a01b038b16835261ffff8a1660208401528860408401528760608401528660808401528060a0840152610f9381840187610c55565b905067ffffffffffffffff851660c084015282810360e0840152610fb78185610e97565b9b9a505050505050505050505056fea26469706673582212200fda3504eb66074b02ad473b8c7322feb2441ef027d9af931924d08e1c54397f64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3944,
        "contract": "contracts/AstarZkSlpx.sol:AstarZkSlpx",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7821,
        "contract": "contracts/AstarZkSlpx.sol:AstarZkSlpx",
        "label": "remoteContract",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 7826,
        "contract": "contracts/AstarZkSlpx.sol:AstarZkSlpx",
        "label": "minAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_enum(Operation)11862,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(Operation)11862": {
        "encoding": "inplace",
        "label": "enum Types.Operation",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(Operation)11862,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Operation)11862",
        "label": "mapping(enum Types.Operation => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}